@page "/demandesignature/ajouter"
@using Grs.BioRestock.Transfer.DataModels.Demandesignature;
@using System.IO;
@using System.Net;
@using Microsoft.Extensions.Configuration;
@inject IConfiguration config



<h3>AddEditDemande</h3>
<EditForm Model="ModelDemande" OnValidSubmit="SubmitForm">

  @*  <div>
        <label for="fileName">File:</label>
        <InputFile OnChange="@Uplo" class="form-control" accept=".pdf" />
    </div>*@
    <MudTextField @bind-Value="ModelDemande.Designation" Label="Designation" Variant="Variant.Outlined"></MudTextField>
    <MudTextField @bind-Value="ModelDemande.NomClient" Label="Nom Client" Variant="Variant.Outlined"></MudTextField>

    <MudItem>
        @if (_file != null)
        {
            <MudAlert>@_file.Name</MudAlert>
        }
               <InputFile id="fileInput" hidden OnChange="UploadFiles" />
        <div>
              <MudButton HtmlTag="label"
                           Variant="Variant.Text"
                           Color="Color.Primary"
                           Size="Size.Small"
                           StartIcon="@Icons.Filled.CloudUpload"
                           for="fileInput">
                    Upload
                </MudButton>
        </div>
    </MudItem>
    <button class="btn btn-primary mt-3" type="submit">Créer Demande</button>
</EditForm>


@code {
    private const long MAX_FILE_SIZE = 1024*1024*10;
    private List<string> errors = new();

    [Inject] private IDemandeSignatureClient _demandeSignature { get; set; }

    private List<DemandeSingatureDto> allDemandes = new();
    public DemandeSingatureDto ModelDemande { get; set; } = new();

    private IBrowserFile _file;

    private async Task SubmitForm()
    {
        try
        { 
            await CaptureFile();
            var response = await _demandeSignature.AddEditAsync(ModelDemande);
            if (response.Succeeded)
            {
                _snackBar.Add(response.Messages[0], Severity.Success);
                _navigationManager.NavigateTo($"/demandesignature/client");
            }
            else
            {
                foreach (var message in response.Messages)
                {
                    _snackBar.Add(message, Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            errors.Add($"Error: {ex.Message}");
        }
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        _file = e.File;
        if (_file != null)
        {
            var buffer = new byte[_file.Size];
            var extension = Path.GetExtension(_file.Name);
            var format = "application/octet-stream";
            await _file.OpenReadStream(_file.Size).ReadAsync(buffer);
            ModelDemande.FileUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            ModelDemande.UploadRequest = new UploadRequest { Data = buffer, UploadType = UploadType.Document, Extension = extension };
        }
    }


    private async Task CaptureFile()
    {
        try
        {
            ModelDemande.FileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(_file.Name));
            ModelDemande.FileData = await _file.GetAllBytes();
        }
        catch (Exception ex)
        {
            errors.Add($"File: {_file.Name} Error: {ex.Message}");
            throw;
        }
    }
}
