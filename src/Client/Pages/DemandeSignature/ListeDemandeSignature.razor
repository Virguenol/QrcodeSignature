@page "/demandesignature/liste"
@using Grs.BioRestock.Shared.Enums.DemandeSignature;
@using Grs.BioRestock.Transfer.DataModels.Demandesignature;



@if (!_loaded)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <div>
        <h3>ListeDemandeSignature</h3>
        <br />
    </div>
    <MudTable Items="@allDemandes" Filter="new Func<DemandeSingatureDto, bool>(Search)" @bind-role="Demande" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loaded" LoadingProgressColor="Color.Info">
        <ToolBarContent>
            <MudSpacer />
                <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="@Localizer["Rechercher des Bons..."]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3" Style="width:100%; align-items:center;"></MudTextField>          
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<DemandeSingatureDto, object>(x => x.Id)">Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<DemandeSingatureDto, object>(x => x.Designation)">Designation</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<DemandeSingatureDto, object>(x => x.NomClient)">Nom client</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<DemandeSingatureDto, object>(x => x.DateEtablissement)">Data Etablissemet</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<DemandeSingatureDto, object>(x => x.demandeStatut)">Statut</MudTableSortLabel></MudTh>
            <MudTh Style="text-align: center">
                Action
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Id</MudTd>
            <MudTd DataLabel="Sign">@context.Designation</MudTd>
            <MudTd DataLabel="Name">@context.NomClient</MudTd>
            <MudTd DataLabel="Position">@context.DateEtablissement</MudTd>
            <MudTd DataLabel="Position">@context.demandeStatut</MudTd>
            <MudTd Style="text-align: right">

                <MudMenu Label="Actions" Variant="Variant.Filled" DisableElevation="true" EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Secondary" Direction="Direction.Left" OffsetX="true">
                    <MudMenuItem OnClick="@(()=>SignerDemande(@context.Id))">Signer</MudMenuItem>
                    <MudMenuItem OnClick="@(() => SupprimerDemande(@context.Id))">Supprimer</MudMenuItem>
                    @if (context.demandeStatut != statutSigner)
                    {
                        <MudMenuItem OnClick="@(()=>AnnulerDemande(@context.Id))">Annuler</MudMenuItem>
                    }
                </MudMenu>

            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code{

    [Inject] private IDemandeSignatureClient _demandeSignature { get; set; }

    private List<DemandeSingatureDto> allDemandes = new ();
    private DemandeSingatureDto Demande = new();
    public DemandeSingatureDto ModelDemande { get; set; } = new();
    private string _searchString = "";

    private DemandeStatut statutSigner = DemandeStatut.Signé;

    public bool _loaded;
    private void searchString()
    {

    }

    protected override async Task OnInitializedAsync()
    {
        await GetDemande();
    }

    private async Task GetDemande()
    {
        try
        {
            var response = await _demandeSignature.GetAllAsync();
            if (response.Succeeded)
            {
                allDemandes = response.Data.ToList();
                _loaded = true;
            }
        }
        catch(Exception)
        {
            throw;
        }
    }

    //private void AddDemande()
    //{
    //    _navigationManager.NavigateTo($"/demandesignature/ajouter");
    //}

    private bool Search(DemandeSingatureDto demande)
    {
        if (string.IsNullOrWhiteSpace(_searchString)) return true;
        if (demande.Designation?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        if (demande.NomClient?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        return false;
    }

    public async Task SignerDemande(int demandeSignatureId)
    {
        var response = await _demandeSignature.SignedDocumentAsync(demandeSignatureId);
        if (response == null)
        {
            _snackBar.Add(response.Messages[0], Severity.Success);
        }
        else
        {
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, Severity.Error);
            }
        }
    }

    public async Task AnnulerDemande(int demandeSignatureId)
    {
        var response = await _demandeSignature.AnnuleAsync(demandeSignatureId);
        if (response == null)
        {
            _snackBar.Add(response.Messages[0], Severity.Success);
        }
        else
        {
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, Severity.Error);
            }
        }
    }

    public async Task SupprimerDemande(int demandeSignatureId)
    {
        var response = await _demandeSignature.DeleteAsync(demandeSignatureId);
        if (response == null)
        {
            _snackBar.Add(response.Messages[0], Severity.Success);
            await GetDemande();
        }
        else
        {
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, Severity.Error);
            }
        }
    }

}
