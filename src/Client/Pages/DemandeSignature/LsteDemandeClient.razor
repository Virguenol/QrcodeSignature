@page "/demandesignature/client"
@using Grs.BioRestock.Shared.Enums.DemandeSignature;
@using Grs.BioRestock.Transfer.DataModels.Demandesignature;
@using Microsoft.AspNetCore.SignalR.Client;



@if (!_loaded)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <div>
        <h3>ListeDemandeSignature</h3>
        <br />
    </div>
    <MudTable Items="@allDemandes" Filter="new Func<DemandeSingatureDto, bool>(Search)" @bind-role="Demande" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loaded" LoadingProgressColor="Color.Info">
        <ToolBarContent>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => InvokeModal(null))">Ajouter</MudButton>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="@Localizer["Rechercher des demande..."]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3" Style="width:100%; align-items:center;"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<DemandeSingatureDto, object>(x => x.Id)">Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<DemandeSingatureDto, object>(x => x.Designation)">Designation</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<DemandeSingatureDto, object>(x => x.NomClient)">Nom client</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<DemandeSingatureDto, object>(x => x.DateEtablissement)">Data Etablissemet</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<DemandeSingatureDto, object>(x => x.FileUrl)">Fichier</MudTableSortLabel></MudTh>
             <MudTh><MudTableSortLabel SortBy="new Func<DemandeSingatureDto, object>(x => x.FileUrlsSigne)">Fichier Signé</MudTableSortLabel></MudTh>
            <MudTh Style="text-align: center">
                Action
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Id</MudTd>
            <MudTd DataLabel="Sign">@context.Designation</MudTd>
            <MudTd DataLabel="Name">@context.NomClient</MudTd>
            <MudTd DataLabel="Position">@context.DateEtablissement.ToString("dd/MM/yyyy")</MudTd>
            <MudTd DataLabel="FichierJoint">
                <MudAlert Severity="Severity.Normal" Square="true" Dense="true">
                    @*@context.FileName*@
                    <MudIconButton Color="Color.Success"
                                   Icon="@Icons.Material.Filled.CloudUpload" Size="Size.Small"
                                   Link="@context.FileUrl" Target="_blank">
                    </MudIconButton>
                </MudAlert>
            </MudTd>
            @if (context.demandeStatut == DemandeStatut.Signé)
            {
                <MudTd DataLabel="FichierJoint">
                    <MudAlert Severity="Severity.Normal" Square="true" Dense="true">
                    @*@context.FileName*@
                    <MudIconButton Color="Color.Success"
                                   Icon="@Icons.Material.Filled.CloudUpload" Size="Size.Small"
                                   Link="@context.FileUrlsSigne" Target="_blank">
                    </MudIconButton>
                </MudAlert>
                </MudTd>
            }
            else
            {
                <MudTd DataLabel="Position">@context.demandeStatut</MudTd>
            }
            <MudTd Style="text-align: right">
@*                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Primary" OnClick="@(()=>AnnulerDemande(@context.Id))" Style="margin:0 3px;">Cancel</MudButton>
*@                @if (context.demandeStatut != statutSigner)
                {
                    <MudMenu Label="Actions" Variant="Variant.Filled" DisableElevation="true" EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Secondary" Direction="Direction.Left" OffsetX="true">
                        @*@if (context.demandeStatut != statutAnnuler)
                        {*@
                        <MudMenuItem OnClick="(() => InvokeModal(Convert.ToString(context.Id)))">@Localizer["Modifier"]</MudMenuItem>
                        @*}*@
                        @if (context.demandeStatut == statutAnnuler || context.demandeStatut == statutNouveau)
                        {
                            <MudMenuItem OnClick="@(() => SupprimerDemande(@context.Id))">Supprimer</MudMenuItem>
                        }
                        @if (context.demandeStatut != statutAnnuler)
                        {
                            <MudMenuItem OnClick="@(()=>AnnulerDemande(@context.Id))">Annuler</MudMenuItem>
                        }
                    </MudMenu>
                }
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {

    [Inject] private IDemandeSignatureClient _demandeSignature { get; set; }

    private List<DemandeSingatureDto> allDemandes = new();
    private DemandeSingatureDto Demande = new();

    public DemandeSingatureDto AddEdtModale { get; set; } = new();

    private string _searchString = "";

    private DemandeStatut statutSigner = DemandeStatut.Signé;
    private DemandeStatut statutAnnuler = DemandeStatut.Annulé;
    private DemandeStatut statutNouveau = DemandeStatut.Nouveau;

    public bool _loaded;
    private void searchString()
    {

    }

    protected override async Task OnInitializedAsync()
    {
        await GetDemande();
    }

    private async Task GetDemande()
    {
        try
        {
            var response = await _demandeSignature.GetAllAsync();
            if (response.Succeeded)
            {
                allDemandes = response.Data.ToList();
                _loaded = true;
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    private bool Search(DemandeSingatureDto demande)
    {
        if (string.IsNullOrWhiteSpace(_searchString)) return true;
        if (demande.Designation?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        if (demande.NomClient?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        return false;
    }

    public async Task SupprimerDemande(int demandeSignatureId)
    {
        string deleteContent = Localizer["voulez vous Supprimer"];
        var parameters = new DialogParameters
        {
          { nameof(Shared.Dialogs.DeleteConfirmationDialog.ContentText), string.Format(deleteContent, demandeSignatureId) }
        };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
            var dialog = _dialogService.Show<Shared.Dialogs.DeleteConfirmationDialog>(Localizer["Delete"], parameters, options);
            var result = await dialog.Result;
            if (!result.Cancelled)
            {
            var response = await _demandeSignature.DeleteAsync(demandeSignatureId);
            if (response == null)
        {
            _snackBar.Add(response.Messages[0], Severity.Success);
            await GetDemande();
        }
            else
        {
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, Severity.Error);
            }
        }
        }
    }

    public async Task AnnulerDemande(int demandeSignatureId)
    {
        string deleteContent = Localizer["Voulez vous annuler"];
        var parameters = new DialogParameters
        {
          { nameof(Shared.Dialogs.DeleteConfirmationDialog.ContentText), string.Format(deleteContent, demandeSignatureId) }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<Shared.Dialogs.DeleteConfirmationDialog>(Localizer["Delete"], parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
        var response = await _demandeSignature.AnnuleAsync(demandeSignatureId);
        if (response == null)
        {
            _snackBar.Add(response.Messages[0], Severity.Success);
                await GetDemande();
        }
        else
        {
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, Severity.Error);
            }
        }
        }
     }

    private async Task InvokeModal(string id)
    {
        var parameters = new DialogParameters();
        if (id != null)
        {
            Demande = allDemandes.FirstOrDefault(d => d.Id == Convert.ToInt32(id));
            if (Demande != null)
            {
                parameters.Add(nameof(AddEdtModal.ModelDemande), new DemandeSingatureDto
                {
                    Id = Demande.Id,
                    Designation = Demande.Designation,
                    NomClient = Demande.NomClient,
                    FileUrl = Demande.FileName,
                });
            }
        }
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<AddEdtModal>(id == null ? Localizer["Create"] : Localizer["Edit"], parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            OnSearch("");
            await GetDemande();
        }
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        //_table.ReloadServerData();
    }



}

